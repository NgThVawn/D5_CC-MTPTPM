@using WebBanHang.Models
@model IEnumerable<Notification>

@{
    ViewData["Title"] = "Thông báo";
    Layout = "~/Views/Shared/_UserLayout.cshtml";
}

<div class="container">
    <h3 class="mb-4 fw-bold text-primary"><i class="fa fa-bell me-2"></i>Thông báo của bạn</h3>

    @if (!Model.Any())
    {
        <div class="alert alert-info">Bạn chưa có thông báo nào.</div>
    }
    else
    {
        <div class="d-flex justify-content-end mb-3">
            <button id="markAllBtn" class="btn btn-sm btn-outline-primary">
                <i class="fa fa-check-double me-1"></i>Đánh dấu tất cả là đã đọc
            </button>
        </div>

        <div class="list-group">
            @foreach (var notify in Model)
            {
                <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-start flex-column flex-md-row
                            rounded shadow-sm mb-2 notification-item @(notify.IsRead ? "read" : "unread")"
                     data-notification-id="@notify.Id"
                     style="cursor: pointer;">
                    <div class="d-flex align-items-start">
                        <i class="fa fa-circle-info fa-lg me-3 text-secondary mt-1"></i>
                        <div>
                            <div class="fw-semibold mb-1">@notify.Message</div>
                            <small class="text-muted">@notify.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                        </div>
                    </div>
                    @if (!notify.IsRead)
                    {
                        <span class="badge bg-warning text-dark mt-2 mt-md-0">Mới</span>
                    }
                </div>
            }
        </div>
    }
</div>

<style>
   .notification-item.read {
    background-color: #f8f9fa;
    color: #6c757d;
}

.notification-item.unread {
    background-color: #fff;
    border-left: 4px solid #0d6efd;
    font-weight: 500;
}

.notification-item:hover {
    background-color: #e9f2ff;
    transition: background-color 0.2s ease;
}

.notification-item .fw-semibold {
    font-size: 1rem;
}

.notification-item small {
    font-size: 0.875rem;
}

</style>

<script>
    document.querySelectorAll(".notification-item").forEach(item => {
        item.addEventListener("click", function () {
            const id = item.dataset.notificationId;

            fetch(`/Notification/MarkAsRead/${id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then(response => {
                if (response.ok) {
                    item.classList.remove("unread");
                    item.classList.add("read");

                    const badge = item.querySelector(".badge");
                    if (badge) badge.remove();
                } else {
                    alert("Lỗi khi đánh dấu đã đọc.");
                }
            }).catch(err => {
                console.error("Lỗi:", err);
            });
        });
    });

    document.getElementById("markAllBtn").addEventListener("click", function () {
        fetch('/Notification/MarkAllAsRead', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        }).then(response => {
            if (response.ok) {
                document.querySelectorAll(".notification-item").forEach(item => {
                    item.classList.remove("unread");
                    item.classList.add("read");

                    const badge = item.querySelector(".badge");
                    if (badge) badge.remove();
                });
            } else {
                alert("Lỗi khi đánh dấu tất cả đã đọc.");
            }
        }).catch(err => {
            console.error("Lỗi:", err);
        });
    });

</script>
